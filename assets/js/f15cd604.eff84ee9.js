"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[504],{3905:(e,t,o)=>{o.r(t),o.d(t,{MDXContext:()=>p,MDXProvider:()=>d,mdx:()=>m,useMDXComponents:()=>u,withMDXComponents:()=>c});var r=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(e[r]=o[r])}return e},i.apply(this,arguments)}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var p=r.createContext({}),c=function(e){return function(t){var o=u(t.components);return r.createElement(e,i({},t,{components:o}))}},u=function(e){var t=r.useContext(p),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},d=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,i=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(o),d=n,f=c["".concat(a,".").concat(d)]||c[d]||h[d]||i;return o?r.createElement(f,l(l({ref:t},p),{},{components:o})):r.createElement(f,l({ref:t},p))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=o.length,a=new Array(i);a[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,a[1]=l;for(var p=2;p<i;p++)a[p]=o[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}f.displayName="MDXCreateElement"},30092:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var r=o(83117),n=o(80102),i=(o(67294),o(3905)),a=["components"],l={id:"stetho",title:"Stetho Guidance",sidebar_label:"Stetho Guidance"},s=void 0,p={unversionedId:"stetho",id:"stetho",title:"Stetho Guidance",description:"In 2015, Facebook (now Meta) introduced Stetho, an Android debugging bridge built on top of Chrome DevTools. While it was a valuable tool to members of the community, it was felt that it was limited in what could be achieved with it. Stetho is Android-only and while Chrome DevTools (which was built for Web Developers) provides a nice foundation to build upon, their capability was also limited.",source:"@site/../docs/stetho.mdx",sourceDirName:".",slug:"/stetho",permalink:"/docs/stetho",draft:!1,editUrl:"https://github.com/facebook/flipper/blob/main/website/../docs/stetho.mdx",tags:[],version:"current",frontMatter:{id:"stetho",title:"Stetho Guidance",sidebar_label:"Stetho Guidance"},sidebar:"main",previous:{title:"Running Flipper with Custom Ports",permalink:"/docs/custom-ports"},next:{title:"Introduction",permalink:"/docs/tutorial/intro"}},c={},u=[],d={toc:u};function h(e){var t=e.components,o=(0,n.Z)(e,a);return(0,i.mdx)("wrapper",(0,r.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"In 2015, Facebook (now Meta) introduced ",(0,i.mdx)("a",{parentName:"p",href:"http://facebook.github.io/stetho/"},"Stetho"),", an Android debugging bridge built on top of ",(0,i.mdx)("a",{parentName:"p",href:"https://developers.google.com/web/tools/chrome-devtools/"},"Chrome DevTools"),". While it was a valuable tool to members of the community, it was felt that it was limited in what could be achieved with it. Stetho is Android-only and while Chrome DevTools (which was built for Web Developers) provides a nice foundation to build upon, their capability was also limited."),(0,i.mdx)("p",null,"Flipper has been built as a standalone app that provides functionality such as handling adb connections and supporting iOS, which weren't easily achievable with Stetho."),(0,i.mdx)("p",null,"Flipper has been built to create a platform that provides all the flexibility needed to build more advanced features and support for iOS. One of Flipper's core concepts is its extensibility using ",(0,i.mdx)("a",{parentName:"p",href:"/docs/tutorial/intro"},"plugins"),". Plugins are written in React and provide a set of ready-to-use UI components that allow Developers to build great plugin UIs with a few lines of code. While offering many new features, Flipper also already covers most of the features provided by Stetho, such network and layout inspection and an advanced log viewer."),(0,i.mdx)("p",null,"Meta is committed to continuously improving Flipper with new features and plugins."),(0,i.mdx)("p",null,"Meta is aware that not all Stetho features are currently supported by Flipper. If you are using a particular feature of Stetho which isn't supported by Flipper, please post details of your use case in the ",(0,i.mdx)("a",{parentName:"p",href:"https://fb.workplace.com/groups/flippersupport"},"Flipper Support")," Workplace group. Meta is confident that Flipper will work well for most use cases and are more than happy to accept contributions from the open-source community."),(0,i.mdx)("p",null,"Stetho will continue to be used, enabling you to choose the tool that fits your needs best."))}h.isMDXComponent=!0}}]);