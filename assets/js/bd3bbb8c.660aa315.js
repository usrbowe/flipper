"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3626],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>p,MDXProvider:()=>u,mdx:()=>x,useMDXComponents:()=>l,withMDXComponents:()=>c});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},i.apply(this,arguments)}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function d(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){return function(t){var r=l(t.components);return n.createElement(e,i({},t,{components:r}))}},l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):d(d({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=l(r),u=o,h=c["".concat(a,".").concat(u)]||c[u]||m[u]||i;return r?n.createElement(h,d(d({ref:t},p),{},{components:r})):n.createElement(h,d({ref:t},p))}));function x(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=h;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d.mdxType="string"==typeof e?e:o,a[1]=d;for(var p=2;p<i;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},25431:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var n=r(83117),o=r(80102),i=(r(67294),r(3905)),a=r(44996),d=["components"],s={id:"layout-inspector",title:"Extending the Layout Inspector"},p=void 0,c={unversionedId:"extending/layout-inspector",id:"extending/layout-inspector",title:"Extending the Layout Inspector",description:"The Layout Inspector plugin can be extended to support new kinds of UI components. You can also extend it to customize the data made available in the sidebar.",source:"@site/../docs/extending/layout-inspector.mdx",sourceDirName:"extending",slug:"/extending/layout-inspector",permalink:"/docs/extending/layout-inspector",draft:!1,editUrl:"https://github.com/facebook/flipper/blob/main/website/../docs/extending/layout-inspector.mdx",tags:[],version:"current",frontMatter:{id:"layout-inspector",title:"Extending the Layout Inspector"},sidebar:"main",previous:{title:"Client Plugin Lifecycle",permalink:"/docs/extending/client-plugin-lifecycle"},next:{title:"Introduction",permalink:"/docs/internals/"}},l={},u=[{value:"Android",id:"android",level:2},{value:"NodeDescriptor",id:"nodedescriptor",level:3},{value:"How to use the NodeDescriptor on Android",id:"how-to-use-the-nodedescriptor-on-android",level:3},{value:"How not to use the NodeDescriptor on Android",id:"how-not-to-use-the-nodedescriptor-on-android",level:3},{value:"Register a descriptor",id:"register-a-descriptor",level:3},{value:"Extending an existing descriptor",id:"extending-an-existing-descriptor",level:3},{value:"iOS",id:"ios",level:2},{value:"SKNodeDescriptor",id:"sknodedescriptor",level:3},{value:"How to use the SKNodeDescriptor on iOS",id:"how-to-use-the-sknodedescriptor-on-ios",level:3},{value:"How not to use the SKNodeDescriptor on iOS",id:"how-not-to-use-the-sknodedescriptor-on-ios",level:3},{value:"Register a Descriptor",id:"register-a-descriptor-1",level:3},{value:"Extending an existing Descriptor",id:"extending-an-existing-descriptor-1",level:3},{value:"Subdescriptors",id:"subdescriptors",level:3}],m={toc:u};function h(e){var t=e.components,r=(0,o.Z)(e,d);return(0,i.mdx)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"The Layout Inspector plugin can be extended to support new kinds of UI components. You can also extend it to customize the data made available in the sidebar.\nDepending on whether or not you want to expose new data on Android or iOS, there are different interfaces you can use."),(0,i.mdx)("p",null,"The following screenshot shows the Layout Inspector in action."),(0,i.mdx)("img",{alt:"Layout Inspector",src:(0,a.default)("img/layoutinspector.png")}),(0,i.mdx)("h2",{id:"android"},"Android"),(0,i.mdx)("h3",{id:"nodedescriptor"},"NodeDescriptor"),(0,i.mdx)("p",null,"To expose an object to the Layout Inspector in Flipper, you have to implement a ",(0,i.mdx)("inlineCode",{parentName:"p"},"NodeDescriptor")," that describes your object. For example, the ",(0,i.mdx)("inlineCode",{parentName:"p"},"ViewDescriptor")," describes ",(0,i.mdx)("inlineCode",{parentName:"p"},"View")," objects and the ",(0,i.mdx)("inlineCode",{parentName:"p"},"FragmentDescriptor")," describe ",(0,i.mdx)("inlineCode",{parentName:"p"},"Fragment")," instances. These descriptors have a set of callbacks used to expose children and data associated with the object they describe."),(0,i.mdx)("p",null,"For the full API, see See ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/b0d2983bd440dc41ec67089e11acd394e6566b8f/android/src/main/java/com/facebook/flipper/plugins/inspector/NodeDescriptor.java"},"NodeDescriptor.java")," in GitHub."),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"NodeDescriptor")," implementations should not subclass other ",(0,i.mdx)("inlineCode",{parentName:"p"},"NodeDescriptor")," implementations. Instead, re-use existing behavior from a more generic descriptor, it's best to use a delegate."),(0,i.mdx)("p",null,"Following are code snippets that illustrate ",(0,i.mdx)("a",{parentName:"p",href:"#how-to-use-the-nodedescriptor-on-android"},"how to use")," and ",(0,i.mdx)("a",{parentName:"p",href:"#how-not-to-use-the-nodedescriptor-on-android"},"how not to use")," the NodeDescriptor on Android."),(0,i.mdx)("h3",{id:"how-to-use-the-nodedescriptor-on-android"},"How to use the NodeDescriptor on Android"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"class ViewGroupDescriptor extends NodeDescriptor<ViewGroup> {\n  public String getName(ViewGroup node) {\n    NodeDescriptor descriptor = descriptorForClass(View.class);\n    return descriptor.getName(node);\n  }\n}\n")),(0,i.mdx)("h3",{id:"how-not-to-use-the-nodedescriptor-on-android"},"How not to use the NodeDescriptor on Android"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"class ViewGroupDescriptor extends ViewDescriptor<ViewGroup> {\n  public String getName(ViewGroup node) {\n    return super.getName(node);\n  }\n}\n")),(0,i.mdx)("h3",{id:"register-a-descriptor"},"Register a descriptor"),(0,i.mdx)("p",null,"Register your descriptor in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"DescriptorMapping")," used to instantiate the ",(0,i.mdx)("inlineCode",{parentName:"p"},"InspectorFlipperPlugin"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"final FlipperClient client = FlipperClient.createInstance(mContext);\nfinal DescriptorMapping descriptorMapping = DescriptorMapping.withDefaults();\ndescriptorMapping.register(MyObject.class, new MyObjectDescriptor());\nclient.addPlugin(new InspectorFlipperPlugin(mContext, descriptorMapping));\n")),(0,i.mdx)("h3",{id:"extending-an-existing-descriptor"},"Extending an existing descriptor"),(0,i.mdx)("p",null,"You may not need to create a whole new descriptor. Instead, you may just want to change extend an existing one to expose some new piece of data. In such a case, just locate the correct descriptor and edit its ",(0,i.mdx)("inlineCode",{parentName:"p"},"getData"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"getAttributes"),", and perhaps ",(0,i.mdx)("inlineCode",{parentName:"p"},"setData")," methods."),(0,i.mdx)("h2",{id:"ios"},"iOS"),(0,i.mdx)("h3",{id:"sknodedescriptor"},"SKNodeDescriptor"),(0,i.mdx)("p",null,"To expose an object to the layout inspector in Sonar, you have to implement a ",(0,i.mdx)("inlineCode",{parentName:"p"},"SKNodeDescriptor")," that describes the object. For example, ",(0,i.mdx)("inlineCode",{parentName:"p"},"SKViewDescriptor")," describes ",(0,i.mdx)("inlineCode",{parentName:"p"},"UIView")," objects, and the ",(0,i.mdx)("inlineCode",{parentName:"p"},"SKComponentDescriptor")," describes ",(0,i.mdx)("inlineCode",{parentName:"p"},"CKComponent")," objects. These descriptors have necessary callbacks that are used to expose its children and data associated with the object they describe."),(0,i.mdx)("p",null,"For the full available API, see ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/b0d2983bd440dc41ec67089e11acd394e6566b8f/iOS/Plugins/FlipperKitLayoutPlugin/FlipperKitLayoutPlugin/SKNodeDescriptor.h"},"SKNodeDescriptor.h")," in GitHub."),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"SKNodeDescriptor")," implementations should ",(0,i.mdx)("strong",{parentName:"p"},"never")," be subclass other ",(0,i.mdx)("inlineCode",{parentName:"p"},"SKNodeDescriptor")," implementations. Instead, re-use existing behaviour by explicitly using other descriptors and delegate behaviour."),(0,i.mdx)("p",null,"Following are code snippets that illustrate ",(0,i.mdx)("a",{parentName:"p",href:"#how-to-use-the-sknodedescriptor-on-ios"},"how to use")," and ",(0,i.mdx)("a",{parentName:"p",href:"#how-not-to-use-the-sknodedescriptor-on-ios"},"how not to use")," the SKNodeDescriptor on iOS."),(0,i.mdx)("h3",{id:"how-to-use-the-sknodedescriptor-on-ios"},"How to use the SKNodeDescriptor on iOS"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"@interface SKArbitraryViewDescriptor : SKNodeDescriptor<ArbitraryView *>\n@end\n\n@implementation SKArbitraryViewDescriptor\n\n- (NSString *)identifierForNode:(ArbitraryView *)node\n{\n  SKNodeDescriptor *descriptor = [self descriptorForClass:[UIView class]];\n  return [descriptor identifierForNode:node];\n}\n\n@end\n")),(0,i.mdx)("h3",{id:"how-not-to-use-the-sknodedescriptor-on-ios"},"How not to use the SKNodeDescriptor on iOS"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"@interface SKArbitraryViewDescriptor : SKViewDescriptor<ArbitraryView *>\n\n@end\n\n@implementation SKArbitraryViewDescriptor\n\n- (NSString *)identifierForNode:(ArbitraryView *)node\n{\n  return [super identifierForNode:node];\n}\n\n@end\n")),(0,i.mdx)("h3",{id:"register-a-descriptor-1"},"Register a Descriptor"),(0,i.mdx)("p",null,"In order to register your descriptor for an object, use ",(0,i.mdx)("inlineCode",{parentName:"p"},"SKDescriptorMapper"),". After registering all descriptors, pass on the descriptor-mapper object to the plugin during initialisation:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[descriptorMapper registerDescriptor:[SKArbitraryViewDescriptor new]\n                            forClass:[ArbitraryView class]];\n\n")),(0,i.mdx)("p",null,"There's already a set of descriptors registered by default in ",(0,i.mdx)("inlineCode",{parentName:"p"},"SKDescriptorMapper"),". If you want to add a descriptor to the default set, you can do it in the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/b0d2983bd440dc41ec67089e11acd394e6566b8f/iOS/Plugins/FlipperKitLayoutPlugin/FlipperKitLayoutPlugin/SKDescriptorMapper.mm"},"SKDescriptorMapper"),"."),(0,i.mdx)("h3",{id:"extending-an-existing-descriptor-1"},"Extending an existing Descriptor"),(0,i.mdx)("p",null,"Sometimes, all you need is to extend the functionality of an existing descriptor. In such as case, you just need to locate the correct descriptor and edit the methods ",(0,i.mdx)("inlineCode",{parentName:"p"},"dataForNode"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"attributesForNode"),", and possibly ",(0,i.mdx)("inlineCode",{parentName:"p"},"dataMutationsForNode"),"."),(0,i.mdx)("h3",{id:"subdescriptors"},"Subdescriptors"),(0,i.mdx)("p",null,"If you want to extend the ",(0,i.mdx)("inlineCode",{parentName:"p"},"SKComponentKitLayoutDescriptor")," and add an additional section based on the nodes of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"SKComponentLayoutDescriptor"),", you can use ",(0,i.mdx)("inlineCode",{parentName:"p"},"SKSubDescriptor"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},'#import <FlipperKitLayoutComponentKitSupport/SKComponentLayoutWrapper.h>\n\nNSString *YourSubDescriptor(SKComponentLayoutWrapper *)node {\n    return @"Meta data";\n}\n\n// At setup time, you must register it:\n[SKComponentLayoutDescriptor registerSubDescriptor:&YourSubDescriptor forName:@"Section Name"];\n')),(0,i.mdx)("p",null,"Swift support is not yet available because you must access ",(0,i.mdx)("inlineCode",{parentName:"p"},"SKComponentLayoutWrapper")," to implement a subdescriptor."))}h.isMDXComponent=!0}}]);